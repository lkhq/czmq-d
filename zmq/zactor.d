/*  =========================================================================
    zactor - actor

    Copyright (c) the Contributors as noted in the AUTHORS file.
    This file is part of CZMQ, the high-level C binding for 0MQ:
    http://czmq.zeromq.org.

    This Source Code Form is subject to the terms of the Mozilla Public
    License, v. 2.0. If a copy of the MPL was not distributed with this
    file, You can obtain one at http://mozilla.org/MPL/2.0/.
    =========================================================================
*/

public import c.zmq.czmq_library;

extern (C):

//  @warning THE FOLLOWING @INTERFACE BLOCK IS AUTO-GENERATED BY ZPROJECT
//  @warning Please edit the model at "api/zactor.api" to make changes.
//  @interface
//  This is a stable class, and may not change except for emergencies. It
//  is provided in stable builds.
// Actors get a pipe and arguments from caller
alias zactor_fn = void function (zsock_t* pipe, void* args);

//  Create a new actor passing arbitrary arguments reference.
zactor_t* zactor_new (zactor_fn task, void* args);

//  Destroy an actor.
void zactor_destroy (zactor_t** self_p);

//  Send a zmsg message to the actor, take ownership of the message
//  and destroy when it has been sent.                             
int zactor_send (zactor_t* self, zmsg_t** msg_p);

//  Receive a zmsg message from the actor. Returns NULL if the actor 
//  was interrupted before the message could be received, or if there
//  was a timeout on the actor.                                      
//  Caller owns return value and must destroy it when done.
zmsg_t* zactor_recv (zactor_t* self);

//  Probe the supplied object, and report if it looks like a zactor_t.
bool zactor_is (void* self);

//  Probe the supplied reference. If it looks like a zactor_t instance,
//  return the underlying libzmq actor handle; else if it looks like   
//  a libzmq actor handle, return the supplied value.                  
void* zactor_resolve (void* self);

//  Return the actor's zsock handle. Use this when you absolutely need
//  to work with the zsock instance rather than the actor.            
zsock_t* zactor_sock (zactor_t* self);

//  Self test of this class.
void zactor_test (bool verbose);

//  @end

