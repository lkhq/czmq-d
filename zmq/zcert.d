/*  =========================================================================
    zcert - work with CURVE security certificates

    Copyright (c) the Contributors as noted in the AUTHORS file.
    This file is part of CZMQ, the high-level C binding for 0MQ:
    http://czmq.zeromq.org.

    This Source Code Form is subject to the terms of the Mozilla Public
    License, v. 2.0. If a copy of the MPL was not distributed with this
    file, You can obtain one at http://mozilla.org/MPL/2.0/.
    =========================================================================
*/

public import c.zmq.czmq_library;

extern (C):

//  @warning THE FOLLOWING @INTERFACE BLOCK IS AUTO-GENERATED BY ZPROJECT
//  @warning Please edit the model at "api/zcert.api" to make changes.
//  @interface
//  This is a stable class, and may not change except for emergencies. It
//  is provided in stable builds.
//  This class has draft methods, which may change over time. They are not
//  in stable releases, by default. Use --enable-drafts to enable.
//  Create and initialize a new certificate in memory
zcert_t* zcert_new ();

//  Accepts public/secret key pair from caller
zcert_t* zcert_new_from (const(ubyte)* public_key, const(ubyte)* secret_key);

//  Load certificate from file
zcert_t* zcert_load (const(char)* filename);

//  Destroy a certificate in memory
void zcert_destroy (zcert_t** self_p);

//  Return public part of key pair as 32-byte binary string
const(ubyte)* zcert_public_key (zcert_t* self);

//  Return secret part of key pair as 32-byte binary string
const(ubyte)* zcert_secret_key (zcert_t* self);

//  Return public part of key pair as Z85 armored string
const(char)* zcert_public_txt (zcert_t* self);

//  Return secret part of key pair as Z85 armored string
const(char)* zcert_secret_txt (zcert_t* self);

//  Set certificate metadata from formatted string.
void zcert_set_meta (
    zcert_t* self,
    const(char)* name,
    const(char)* format,
    ...);

//  Get metadata value from certificate; if the metadata value doesn't
//  exist, returns NULL.                                              
const(char)* zcert_meta (zcert_t* self, const(char)* name);

//  Get list of metadata fields from certificate. Caller is responsible for
//  destroying list. Caller should not modify the values of list items.    
zlist_t* zcert_meta_keys (zcert_t* self);

//  Save full certificate (public + secret) to file for persistent storage  
//  This creates one public file and one secret file (filename + "_secret").
int zcert_save (zcert_t* self, const(char)* filename);

//  Save public certificate only to file for persistent storage
int zcert_save_public (zcert_t* self, const(char)* filename);

//  Save secret certificate only to file for persistent storage
int zcert_save_secret (zcert_t* self, const(char)* filename);

//  Apply certificate to socket, i.e. use for CURVE security on socket.
//  If certificate was loaded from public file, the secret key will be 
//  undefined, and this certificate will not work successfully.        
void zcert_apply (zcert_t* self, void* socket);

//  Return copy of certificate; if certificate is NULL or we exhausted
//  heap memory, returns NULL.                                        
//  Caller owns return value and must destroy it when done.
zcert_t* zcert_dup (zcert_t* self);

//  Return true if two certificates have the same keys
bool zcert_eq (zcert_t* self, zcert_t* compare);

//  Print certificate contents to stdout
void zcert_print (zcert_t* self);

//  Self test of this class
void zcert_test (bool verbose);

//  *** Draft method, for development use, may change without warning ***
//  Unset certificate metadata.

// CZMQ_BUILD_DRAFT_API
//  @end

//  Deprecated method aliases
alias zcert_dump = zcert_print;

