/*  =========================================================================
    zdir - work with file-system directories

    Copyright (c) the Contributors as noted in the AUTHORS file.
    This file is part of CZMQ, the high-level C binding for 0MQ:
    http://czmq.zeromq.org.

    This Source Code Form is subject to the terms of the Mozilla Public
    License, v. 2.0. If a copy of the MPL was not distributed with this
    file, You can obtain one at http://mozilla.org/MPL/2.0/.
    =========================================================================
*/

import core.stdc.stdio;
import core.stdc.time;
import core.sys.posix.sys.types;

public import c.zmq.czmq_library;

extern (C):

//  @warning THE FOLLOWING @INTERFACE BLOCK IS AUTO-GENERATED BY ZPROJECT
//  @warning Please edit the model at "api/zdir.api" to make changes.
//  @interface
//  This is a stable class, and may not change except for emergencies. It
//  is provided in stable builds.
//  Create a new directory item that loads in the full tree of the specified
//  path, optionally located under some parent path. If parent is "-", then 
//  loads only the top-level directory, and does not use parent as a path.  
zdir_t* zdir_new (const(char)* path, const(char)* parent);

//  Destroy a directory tree and all children it contains.
void zdir_destroy (zdir_t** self_p);

//  Return directory path
const(char)* zdir_path (zdir_t* self);

//  Return last modification time for directory.
time_t zdir_modified (zdir_t* self);

//  Return total hierarchy size, in bytes of data contained in all files
//  in the directory tree.                                              
off_t zdir_cursize (zdir_t* self);

//  Return directory count
size_t zdir_count (zdir_t* self);

//  Returns a sorted list of zfile objects; Each entry in the list is a pointer
//  to a zfile_t item already allocated in the zdir tree. Do not destroy the   
//  original zdir tree until you are done with this list.                      
//  Caller owns return value and must destroy it when done.
zlist_t* zdir_list (zdir_t* self);

//  Remove directory, optionally including all files that it contains, at  
//  all levels. If force is false, will only remove the directory if empty.
//  If force is true, will remove all files and all subdirectories.        
void zdir_remove (zdir_t* self, bool force);

//  Calculate differences between two versions of a directory tree.    
//  Returns a list of zdir_patch_t patches. Either older or newer may  
//  be null, indicating the directory is empty/absent. If alias is set,
//  generates virtual filename (minus path, plus alias).               
//  Caller owns return value and must destroy it when done.
zlist_t* zdir_diff (zdir_t* older, zdir_t* newer, const(char)* alias_);

//  Return full contents of directory as a zdir_patch list.
//  Caller owns return value and must destroy it when done.
zlist_t* zdir_resync (zdir_t* self, const(char)* alias_);

//  Load directory cache; returns a hash table containing the SHA-1 digests
//  of every file in the tree. The cache is saved between runs in .cache.  
//  Caller owns return value and must destroy it when done.
zhash_t* zdir_cache (zdir_t* self);

//  Print contents of directory to open stream
void zdir_fprint (zdir_t* self, FILE* file, int indent);

//  Print contents of directory to stdout
void zdir_print (zdir_t* self, int indent);

//  Create a new zdir_watch actor instance:                       
//                                                                
//      zactor_t *watch = zactor_new (zdir_watch, NULL);          
//                                                                
//  Destroy zdir_watch instance:                                  
//                                                                
//      zactor_destroy (&watch);                                  
//                                                                
//  Enable verbose logging of commands and activity:              
//                                                                
//      zstr_send (watch, "VERBOSE");                             
//                                                                
//  Subscribe to changes to a directory path:                     
//                                                                
//      zsock_send (watch, "ss", "SUBSCRIBE", "directory_path");  
//                                                                
//  Unsubscribe from changes to a directory path:                 
//                                                                
//      zsock_send (watch, "ss", "UNSUBSCRIBE", "directory_path");
//                                                                
//  Receive directory changes:                                    
//      zsock_recv (watch, "sp", &path, &patches);                
//                                                                
//      // Delete the received data.                              
//      free (path);                                              
//      zlist_destroy (&patches);                                 
void zdir_watch (zsock_t* pipe, void* unused);

//  Self test of this class.
void zdir_test (bool verbose);

//  @end

//  Returns a sorted array of zfile objects; returns a single block of memory,
//  that you destroy by calling zstr_free(). Each entry in the array is a pointer
//  to a zfile_t item already allocated in the zdir tree. The array ends with
//  a null pointer. Do not destroy the original zdir tree until you are done
//  with this array.
zfile_t** zdir_flatten (zdir_t* self);

//  Free a provided string, and nullify the parent pointer. Safe to call on
//  a null pointer.
void zdir_flatten_free (zfile_t*** files_p);

//  Deprecated method aliases
alias zdir_dump = zdir_print;

